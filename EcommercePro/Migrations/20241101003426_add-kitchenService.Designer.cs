// <auto-generated />
using System;
using EcommercePro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EtisiqueApi.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241101003426_add-kitchenService")]
    partial class addkitchenService
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommercePro.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateOnly?>("UpdatedDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("EcommercePro.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnable")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("projectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("projectId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EcommercePro.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TcvIncTax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("contractFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("EcommercePro.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("customerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EcommercePro.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BuidingNo")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApartmentServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "كهرباء"
                        },
                        new
                        {
                            Id = 2,
                            Name = "سباكة"
                        },
                        new
                        {
                            Id = 3,
                            Name = "دهان"
                        },
                        new
                        {
                            Id = 4,
                            Name = "رخام أو بلاط"
                        },
                        new
                        {
                            Id = 5,
                            Name = "المنيوم وزجاج"
                        },
                        new
                        {
                            Id = 6,
                            Name = "مكافحة حشرات"
                        },
                        new
                        {
                            Id = 7,
                            Name = "شتر"
                        });
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentServicesRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestCode")
                        .HasColumnType("int");

                    b.Property<string>("RequestImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestLocationId")
                        .HasColumnType("int");

                    b.Property<string>("RequestStuatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("UnitNo")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestLocationId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("projectId");

                    b.ToTable("ApartmentServicesRequests");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentServicesType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApartmentServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentServiceId");

                    b.ToTable("ApartmentServicesTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApartmentServiceId = 1,
                            Name = "ليد"
                        },
                        new
                        {
                            Id = 2,
                            ApartmentServiceId = 1,
                            Name = "سبوت لايت"
                        },
                        new
                        {
                            Id = 3,
                            ApartmentServiceId = 1,
                            Name = "مروحة شفط"
                        },
                        new
                        {
                            Id = 4,
                            ApartmentServiceId = 1,
                            Name = "لمبة سطح"
                        },
                        new
                        {
                            Id = 5,
                            ApartmentServiceId = 1,
                            Name = "مفتاح"
                        },
                        new
                        {
                            Id = 6,
                            ApartmentServiceId = 1,
                            Name = "مفتاح طبلون"
                        },
                        new
                        {
                            Id = 7,
                            ApartmentServiceId = 1,
                            Name = "التماس"
                        },
                        new
                        {
                            Id = 8,
                            ApartmentServiceId = 1,
                            Name = "أخرى"
                        },
                        new
                        {
                            Id = 9,
                            ApartmentServiceId = 2,
                            Name = "سخان"
                        },
                        new
                        {
                            Id = 10,
                            ApartmentServiceId = 2,
                            Name = "خلاط"
                        },
                        new
                        {
                            Id = 11,
                            ApartmentServiceId = 2,
                            Name = "شطاف"
                        },
                        new
                        {
                            Id = 12,
                            ApartmentServiceId = 2,
                            Name = "دش مطرى"
                        },
                        new
                        {
                            Id = 13,
                            ApartmentServiceId = 2,
                            Name = "سيفون"
                        },
                        new
                        {
                            Id = 14,
                            ApartmentServiceId = 2,
                            Name = "تمديدات"
                        },
                        new
                        {
                            Id = 15,
                            ApartmentServiceId = 2,
                            Name = "أخرى"
                        },
                        new
                        {
                            Id = 16,
                            ApartmentServiceId = 3,
                            Name = "جدار"
                        },
                        new
                        {
                            Id = 17,
                            ApartmentServiceId = 3,
                            Name = "سقف"
                        },
                        new
                        {
                            Id = 18,
                            ApartmentServiceId = 3,
                            Name = " باب حديد"
                        },
                        new
                        {
                            Id = 19,
                            ApartmentServiceId = 3,
                            Name = "بروفايل"
                        },
                        new
                        {
                            Id = 20,
                            ApartmentServiceId = 3,
                            Name = "أخرى"
                        },
                        new
                        {
                            Id = 21,
                            ApartmentServiceId = 4,
                            Name = "غرفة"
                        },
                        new
                        {
                            Id = 22,
                            ApartmentServiceId = 4,
                            Name = "سطح"
                        },
                        new
                        {
                            Id = 23,
                            ApartmentServiceId = 4,
                            Name = "حوش"
                        },
                        new
                        {
                            Id = 24,
                            ApartmentServiceId = 4,
                            Name = "دورة مياه"
                        },
                        new
                        {
                            Id = 25,
                            ApartmentServiceId = 5,
                            Name = "قفل شباك"
                        },
                        new
                        {
                            Id = 26,
                            ApartmentServiceId = 5,
                            Name = "مسكة شباك"
                        },
                        new
                        {
                            Id = 27,
                            ApartmentServiceId = 5,
                            Name = "شبك بعوض"
                        },
                        new
                        {
                            Id = 28,
                            ApartmentServiceId = 5,
                            Name = "باب زجاج"
                        },
                        new
                        {
                            Id = 29,
                            ApartmentServiceId = 5,
                            Name = "مفصلات زجاج"
                        },
                        new
                        {
                            Id = 30,
                            ApartmentServiceId = 5,
                            Name = "اخرى"
                        });
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentSubServicesRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ApartmentServicesRequestid")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestsCommonPartsid")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApServiceTypeId");

                    b.HasIndex("ApartmentServicesRequestid");

                    b.HasIndex("RequestsCommonPartsid");

                    b.ToTable("ApartmentSubServicesRequests");
                });

            modelBuilder.Entity("EtisiqueApi.Models.CarWashContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarWashContracts");
                });

            modelBuilder.Entity("EtisiqueApi.Models.CarWashRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumberDigits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarNumberLetters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContractId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DateOfVisit")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.Property<string>("PaymentImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestCode")
                        .HasColumnType("int");

                    b.Property<int>("RequestLocationId")
                        .HasColumnType("int");

                    b.Property<string>("RequestStuatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ContractId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestLocationId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("projectId");

                    b.ToTable("CarWashRequests");
                });

            modelBuilder.Entity("EtisiqueApi.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BulidingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeProject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("EtisiqueApi.Models.Guarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuaranteeType")
                        .HasColumnType("int");

                    b.Property<bool>("InsideApartment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("projectId");

                    b.ToTable("Guarantees");
                });

            modelBuilder.Entity("EtisiqueApi.Models.KitchenServices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgreementFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CloseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestCode")
                        .HasColumnType("int");

                    b.Property<string>("RequestImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestLocationId")
                        .HasColumnType("int");

                    b.Property<string>("RequestStuatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UnitNo")
                        .HasColumnType("int");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RequestLocationId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("projectId");

                    b.ToTable("KitchenServices");
                });

            modelBuilder.Entity("EtisiqueApi.Models.RequestManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcedureType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.Property<string>("userId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("RequestManagements");
                });

            modelBuilder.Entity("EtisiqueApi.Models.RequestsCommonParts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NumDays")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestCode")
                        .HasColumnType("int");

                    b.Property<string>("RequestImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestStuatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicianId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UnitNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("TechnicianId");

                    b.HasIndex("projectId");

                    b.ToTable("RequestCommonParts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommercePro.Models.ApplicationUser", b =>
                {
                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EcommercePro.Models.Contract", b =>
                {
                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany("Contract")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EcommercePro.Models.Location", b =>
                {
                    b.HasOne("EtisiqueApi.Models.Customer", "Customer")
                        .WithMany("Locations")
                        .HasForeignKey("customerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("EcommercePro.Models.Project", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentServicesRequest", b =>
                {
                    b.HasOne("EtisiqueApi.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("EcommercePro.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("RequestLocationId");

                    b.HasOne("EtisiqueApi.Models.ApartmentService", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommercePro.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentServicesType", b =>
                {
                    b.HasOne("EtisiqueApi.Models.ApartmentService", "ApartmentServices")
                        .WithMany("ServicesTypes")
                        .HasForeignKey("ApartmentServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApartmentServices");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentSubServicesRequest", b =>
                {
                    b.HasOne("EtisiqueApi.Models.ApartmentServicesType", "ApartmentServicesType")
                        .WithMany()
                        .HasForeignKey("ApServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtisiqueApi.Models.ApartmentServicesRequest", null)
                        .WithMany("SubServices")
                        .HasForeignKey("ApartmentServicesRequestid");

                    b.HasOne("EtisiqueApi.Models.RequestsCommonParts", null)
                        .WithMany("SubServices")
                        .HasForeignKey("RequestsCommonPartsid");

                    b.Navigation("ApartmentServicesType");
                });

            modelBuilder.Entity("EtisiqueApi.Models.CarWashRequest", b =>
                {
                    b.HasOne("EtisiqueApi.Models.CarWashContract", "CarWashContract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EtisiqueApi.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommercePro.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("RequestLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommercePro.Models.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWashContract");

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("EtisiqueApi.Models.Customer", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("EtisiqueApi.Models.Guarantee", b =>
                {
                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany("Guarantee")
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EtisiqueApi.Models.KitchenServices", b =>
                {
                    b.HasOne("EtisiqueApi.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("EcommercePro.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("RequestLocationId");

                    b.HasOne("EcommercePro.Models.ApplicationUser", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Location");

                    b.Navigation("Project");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("EtisiqueApi.Models.RequestManagement", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("EtisiqueApi.Models.RequestsCommonParts", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("EtisiqueApi.Models.ApartmentService", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommercePro.Models.ApplicationUser", "Technician")
                        .WithMany()
                        .HasForeignKey("TechnicianId");

                    b.HasOne("EcommercePro.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("projectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");

                    b.Navigation("Project");

                    b.Navigation("ServiceType");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationRole", null)
                        .WithMany("Users")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("EcommercePro.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommercePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EcommercePro.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommercePro.Models.ApplicationRole", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EcommercePro.Models.Project", b =>
                {
                    b.Navigation("Contract");

                    b.Navigation("Guarantee");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentService", b =>
                {
                    b.Navigation("ServicesTypes");
                });

            modelBuilder.Entity("EtisiqueApi.Models.ApartmentServicesRequest", b =>
                {
                    b.Navigation("SubServices");
                });

            modelBuilder.Entity("EtisiqueApi.Models.Customer", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("EtisiqueApi.Models.RequestsCommonParts", b =>
                {
                    b.Navigation("SubServices");
                });
#pragma warning restore 612, 618
        }
    }
}
